SOA & MicroServices
 
What are the main benefits of SOA?

Self contained services
Loosely coupled 
Reusabiltiy, dont have to keep building the same service in different enviroments  
Isolation Testing/Debugging
Vendor nuetral communications framework


How can you achieve loose coupling in SOA ?

Service contract and Metadata
Distributed control
Using mediators either broker or ESB
Asynchronous communication


Are web services and SOA the same?

SOA and web services are not the same thing. SOA is an architecture that allows developers to combine
multiple application services into a larger, composite service. SOA can be implemented using SOAP-based 
web services or REST APIs, or sometimes a combination. It's important to understand that in SOA, 
a service is any remotely available resource that can respond to requests. Where as a web service is implemented 
using specific protocols.


What is a reusable service?

For example a business can provide some services to a customer like checking credit, checking delivery status and stock. 
These functionalities are common for businesses, and so its possible to reuse any of these services instead of recreating them
when building different applications for different businesses.


What are the disadvantages of SOA?

SOA is based on loosely coupled architecture that’s why SOA has no synchronization element.


What is ESB and where does it fit in?

The bus is a technology capability that includes the network, transport, routing, delivery of messages and content
and supporting communication protocol. It is the central part to an SOA and is the carrier for all consumer and service 
interactions.


In SOA do we need to build a system from scratch ?

The services a new system will incorporate can be built from scratch but are often created by exposing functions from 
legacy systems as service interfaces.


What is the most important skill needed to adopt SOA ?technical or cultural?

To produce a plan for an effective SOA program in  a heterogeneous  environment,  a company  must objectively  assess 
strengths  and  weaknesses. In  general, a roadmap  is  an  accepted  means  of providing  a  plan to  reach  certain  
objectives and plan future vision. These are cultral aspects of an organisation.


List down the advantages of Microservices Architecture ?

-The constituent services are small, they can be built by one or more small teams.

-These services can also be deployed independently, hence its easy to identify hot services and scale them independently.

-Easier to choose the technology stack (programming languages, databases, etc.) which is best suited for the required 
 functionality.


What are the best practices to design Microservices ?

Define the scope of a service
High cohesion combined With loose coupling
Unique source of identification
Data storage segregation
API integration how services communicate to each other


How does Microservice Architecture work ?

The main idea behind a microservice architecture is that applications are broken down into smaller pieces that work 
seamlessly together isolating software functionality into multiple independent modules that are responsible for performing 
precisely defined, standalone tasks. These modules communicate with each other through APIs. They support separation of 
responsibilities for building highly scaled applications, allowing work to be done independently on individual
services without impacting the work on other parts of the system.

What are the pros and cons of Microservice Architecture ?

PROS
Increased scalability
Fault Isolation
Increased business agility
Maintainability 
Developer productivity

CONS
Communication issues
Security
Automation testing
Complexity


What is the difference between Monolithic, SOA and Microservices Architecture ?

The difference between microservices and monolithic architecture is that microservices compose a single application
from many smaller, loosely coupled services as opposed to the monolithic approach of one large, tightly coupled application.

The differences between microservices and SOA can be a bit less clear. Especially around the role of the enterprise 
service bus (ESB), it’s easier to consider the difference as one of scope. SOA was an enterprise-wide effort to standardize 
the way all services talk to and integrate with each other, whereas microservices architecture is application-specific,
some services dont need interaction with others.


What are the challenges you face while working Microservice Architectures ?

Managing 
Monitoring 
Embracing culture
Intergration testing
Fault tolerance


What are the characteristics of Microservices ?

Service components 
Products not projects
Smart endpoints
Design for failure

